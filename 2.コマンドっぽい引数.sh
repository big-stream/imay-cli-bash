#!/bin/bash

# コマンドっぽい引数


#---------------------------------------------------------------------

# コマンド --help --file ファイル 
# 上記のような引数(オプション)を使うコマンドっぽいスクリプトにするなら、
# whileとcase文で解析するのが簡単

# しくみ:
# shiftコマンドでぞれぞれの引数の番号をずらす(減らす)
# 「shift 1」で、引数2を引数1へ、引数3を引数2へ..

# 未処理の引数がある限り継続するwhile
while [[ $# -gt 0 ]] # $#は(未処理の)引数の数
do
  # 引数1($1)がどれかのパターンにマッチしたらその処理後、shiftで引数をずらす
  case "$1" in

  # 引数がないオプション
  -h|--help) # -hか--helpにマッチ
    help=yes
    shift 1 # 1ずらす
    ;;

  # 引数があるオプション
  --file)
    [[ $2 ]] || { echo "エラー: $1には引数が必要"; exit 1; }
    file=$2
    shift 2 # 2ずらす
    ;;

  # 不明なオプションを禁止するなら
  -*) # 上記以外の-から始まるものにマッチ
    echo "不明なオプション: $1"
    exit 1 # エラーで終了
    ;;

  # オプションでもその引数でもないもの(オペランド)
  *) # その他なんでもマッチ
    operand[${#operand[@]}]=$1 # 配列に追加
    shift 1
    ;;

  esac
done


#---------------------------------------------------------------------

# 指定されたオプションによって処理を分岐

# --help
if [ "$help" = yes ]; then
  echo "ヘルプガイド"
  exit 0
fi

# --file
if [ -f "$file" ]; then
  echo "ファイル名: $file"
elif [ "$file" ]; then
  echo "そんなファイルないよ: $file"
fi

# オペランド
if [ "${#operand[@]}" != 0 ]; then # ${#配列[@]}は配列の要素数
  echo "オペランド: ${operand[@]}"
fi

